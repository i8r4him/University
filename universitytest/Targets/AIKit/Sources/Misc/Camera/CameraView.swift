//
//  CameraView.swift
//  AIKit (Generated by SwiftyLaunch 1.5.0)
//  https://docs.swiftylaun.ch/module/aikit/ai-vision-example
//

import AVFoundation
import SharedKit
import SwiftUI

// for attaching AVCaptureVideoPreviewLayer to SwiftUI View
struct CameraView: UIViewRepresentable {

	let session: AVCaptureSession

	/// Current device orientation. Should be set from outside using UIDevice.orientationDidChangeNotification via NotificationCenter
	@Binding var orientation: UIDeviceOrientation

	// creates and configures a UIKit-based video preview view
	func makeUIView(context: Context) -> VideoPreviewView {
		let view = VideoPreviewView()
		view.backgroundColor = .black
		view.contentMode = .scaleToFill
		view.videoPreviewLayer.session = session
		view.videoPreviewLayer.videoGravity = .resizeAspectFill

		// Add observer for changes in videoPreviewLayer
		// once there is a change -> call adaptVideoPreviewToOrientation
		// the reason for this is that there is a slight chance that view.videoPreviewLayer.connection
		// might be nil when this function is called, thus, the videoRotationAngle cannot be set correctly
		// and the displayed camera preview is not rotated correctly.
		view.observeVideoPreviewLayerChanges { [weak view] in
			guard let view = view else { return }
			if currentPlatform == .pad {
				adaptVideoPreviewToOrientation(videoPreviewLayer: view.videoPreviewLayer)
			} else {
				view.videoPreviewLayer.connection?.videoRotationAngle = 90
			}
		}
		return view
	}

	func updateUIView(_ uiView: VideoPreviewView, context: Context) {
		// depending on the device orientation, set the view
		if currentPlatform == .pad {
			adaptVideoPreviewToOrientation(videoPreviewLayer: uiView.videoPreviewLayer)
		}
	}

	// We take the orientation value, which is set from the outside, for exmaple in AIVisionExampleView
	// And use it to calculate the correct orientation angle for the preview feed
	func adaptVideoPreviewToOrientation(videoPreviewLayer: AVCaptureVideoPreviewLayer) {
		let videoRotationAngle = CameraManager.convertOrientationToVideoRotationAngle(orientation)
		if let connection = videoPreviewLayer.connection, connection.isVideoRotationAngleSupported(videoRotationAngle) {
			connection.videoRotationAngle = videoRotationAngle
		}
	}

	// UIKit-based view for displaying the camera preview
	class VideoPreviewView: UIView {

		/// specifies the layer class used
		override class var layerClass: AnyClass {
			AVCaptureVideoPreviewLayer.self
		}

		/// retrieves the AVCaptureVideoPreviewLayer for configuration
		var videoPreviewLayer: AVCaptureVideoPreviewLayer {
			return layer as! AVCaptureVideoPreviewLayer
		}

		/// observes changes to the connection in videoPreviewLayer
		private var observer: NSKeyValueObservation?

		/// Called when the CameraView is intialized to observe changes
		func observeVideoPreviewLayerChanges(completion: @escaping () -> Void) {
			observer = videoPreviewLayer.observe(\.connection, options: [.new, .initial]) { [weak self] layer, _ in
				guard let _ = self, layer.connection != nil else { return }

				// If connection is not nil -> execute
				DispatchQueue.main.async {
					completion()
				}
			}
		}

		deinit {
			observer?.invalidate()
		}
	}
}
